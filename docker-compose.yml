version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: event-booking-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: event_booking
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - event-booking-network

  redis:
    image: redis:7-alpine
    container_name: event-booking-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - event-booking-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: event-booking-api
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
      - ENVIRONMENT=production
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/event_booking?sslmode=disable
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - JWT_SECRET=production-secret-change-this
      - JWT_EXPIRATION_MINUTES=120
      - BOOKING_TIMEOUT_MINUTES=15
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - event-booking-network

volumes:
  postgres_data:
  redis_data:

networks:
  event-booking-network:
    driver: bridge
